"""
This type stub file was generated by pyright.
"""

"""Patch to the python wrapper of ../linear_solver.h providing an algebraic API.

This is directly imported, and use exclusively in ./linear_solver.swig. See that
file.
For examples leveraging the code defined here, see ./pywraplp_test.py and
../../../python/linear_programming.py.
"""
inf = ...
class _FakeMPVariableRepresentingTheConstantOffset:
  """A dummy class for a singleton instance used to represent the constant.

  To represent linear expressions, we store a dictionary
  MPVariable->coefficient. To represent the constant offset of the expression,
  we use this class as a substitute: its coefficient will be the offset. To
  properly be evaluated, its solution_value() needs to be 1.
  """
  def solution_value(self): # -> Literal[1]:
    ...
  
  def __repr__(self): # -> Literal['OFFSET_KEY']:
    ...
  


OFFSET_KEY = ...
def CastToLinExp(v): # -> Constant:
  ...

class LinearExpr:
  """Holds linear expressions.

  A linear expression is essentially an offset (floating-point value), and a
  dictionary mapping MPVariable objects to their coefficient (which is also a
  floating-point value).
  """
  OVERRIDDEN_OPERATOR_METHODS = ...
  def solution_value(self): # -> int:
    """Value of this linear expr, using the solution_value of its vars."""
    ...
  
  def AddSelfToCoeffMapOrStack(self, coeffs, multiplier, stack):
    """Private function used by GetCoeffs() to delegate processing.

    Implementation must either update coeffs or push to the stack a
    sub-expression and the accumulated multiplier that applies to it.

    Args:
      coeffs: A dictionary of variables' coefficients. It is a defaultdict that
          initializes the new values to 0 by default.
      multiplier: The current accumulated multiplier to apply to this
          expression.
      stack: A list to append to if the current expression is composed of
          sub-expressions. The elements of the stack are pair tuples
          (multiplier, linear_expression).
    """
    ...
  
  def GetCoeffs(self): # -> defaultdict[Unknown, float]:
    ...
  
  def __add__(self, expr): # -> SumArray:
    ...
  
  def __radd__(self, cst): # -> SumArray:
    ...
  
  def __sub__(self, expr: LinearExpr): # -> SumArray:
    ...
  
  def __rsub__(self, cst): # -> SumArray:
    ...
  
  def __mul__(self, cst): # -> ProductCst:
    ...
  
  def __rmul__(self, cst): # -> ProductCst:
    ...
  
  def __div__(self, cst): # -> ProductCst:
    ...
  
  def __truediv__(self, cst): # -> ProductCst:
    ...
  
  def __neg__(self): # -> ProductCst:
    ...
  
  def __eq__(self, arg) -> bool:
    ...
  
  def __ge__(self, arg) -> bool:
    ...
  
  def __le__(self, arg) -> bool:
    ...
  
  def __lt__(self, arg) -> bool:
    ...
  
  def __gt__(self, arg) -> bool:
    ...
  
  def __ne__(self, arg) -> bool:
    ...
  


class VariableExpr(LinearExpr):
  """Represents a LinearExpr containing only a single variable."""
  def __init__(self, mpvar) -> None:
    ...
  
  def AddSelfToCoeffMapOrStack(self, coeffs, multiplier, stack): # -> None:
    ...
  


class ProductCst(LinearExpr):
  """Represents the product of a LinearExpr by a constant."""
  def __init__(self, expr, coef) -> None:
    ...
  
  def __str__(self) -> str:
    ...
  
  def AddSelfToCoeffMapOrStack(self, coeffs, multiplier, stack): # -> None:
    ...
  


class Constant(LinearExpr):
  def __init__(self, val) -> None:
    ...
  
  def __str__(self) -> str:
    ...
  
  def AddSelfToCoeffMapOrStack(self, coeffs, multiplier, stack): # -> None:
    ...
  


class SumArray(LinearExpr):
  """Represents the sum of a list of LinearExpr."""
  def __init__(self, array) -> None:
    ...
  
  def __str__(self) -> str:
    ...
  
  def AddSelfToCoeffMapOrStack(self, coeffs, multiplier, stack): # -> None:
    ...
  


def Sum(*args): # -> SumArray:
  ...

SumCst = ...
class LinearConstraint:
  """Represents a linear constraint: LowerBound <= LinearExpr <= UpperBound."""
  def __init__(self, expr, lb, ub) -> None:
    ...
  
  def __str__(self) -> str:
    ...
  
  def Extract(self, solver, name=...):
    """Performs the actual creation of the constraint object."""
    ...
  


